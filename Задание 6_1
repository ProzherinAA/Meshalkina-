## Задание 6.1
## 
## Начало - указываем рабочую директорию 
setwd ("C:/DSM/Control_Meshalkina")

## Проверка пути в рабочую директорию
getwd()

#очистим полностью память (удаление объектов из указанной среды)
rm(list=ls())


## подключаем необходимые пакеты
library(sp)
library(rgdal)
library(maptools)
library(gstat)
library(rgeos)
library(MASS)
library(raster)

## считываем данные из текстового файла с расширением txt,
## где есть заголовок
alldate <- read.table("Dano_1.txt", header = TRUE)

## смотрим, что скачалось

## Размерность данных 100 на 3 (100 строк и 3 колонки)
dim(alldate)

## Общая стат информация
summary(alldate)

## Узнаем имена переменных
names(alldate)

## Выведем только одну переменную
alldate$MG1

##Среднее
mean(alldate$MG1)

##Стандартное отклонение
sd(alldate$MG1)

##Минимум, максимум, медиана
min(alldate$MG1)
max(alldate$MG1)
median(alldate$MG1)
summary(alldate$MG1)


# команда для выравнивания позиции графика, если он сбился в бок
par(mfrow=c(1,1))

## Настройки гистограммы (цвет линий, заливка, название)
hist(alldate$MG1, border = "blue", col="yellow3",
     main = "Гистограмма свойства MG1")


## Гистограмма выводится более симметричной
hist(sqrt(alldate$MG1),breaks =, 
     border = "blue", col="yellow3",
     main = "Гистограмма свойства MG1")

class(alldate)

##приписываем первым двум столбцам, что это координаты
# make spatial
coordinates(alldate) <- ~X+Y ## меняет класс объекта, теперь  X Y пространственные координаты, а не линейные


## Узнаем тип объекта
class(alldate) ## пространственный объект

plot(alldate)  ## нарисовал схему пробоотбора (в контурах участка пробоотбора)

spplot(alldate) ## покрасил на 5 промежутках в процентном отношении

spplot(alldate, main = "Свойство MG1") ## Добавили на график заголовок


spplot(alldate, xlim = c(1,205), ylim = c(1,205), 
       scales=list(draw=TRUE))
## добивились оси координат

spplot(alldate, cex = 0.6)
## меняет размер точек для оптимальной наглядности



## отрисовали график со всеми параметрами вместе, 
## убрали легенду в правый верхний угол за границы осей
spplot(alldate, zcol = "MG1", xlim = c(1,205), ylim = c(1,205),
       cex = 0.5, main = "Свойство MG1 [ммоль(+)/100 г почвы]",
       key.space = list(x = 1, y = 0.98, corner = c(0,1)),
       scales=list(draw=TRUE))

# Для создания маски находим минимальные и максимальные координаты X и Y, 
# меньшие, чем координаты точек. В проверочной работе Xmin=0, Xmax=202, Ymin=1, Ymax=203. 
# Сделаем сетку через 2 м, тогда на участок 200 на 200 м необходимо будет 101 строка и 101 столбец.

# создаем растр по координатам его краев и числу колонок/строк, заполненный единицами
mask_1 = raster (nrows=101, ncols=101, xmn=0, xmx=202, ymn=1, 
                 ymx=203, vals=1)
plot(mask_1) # проверяем, что получилось

# переводим растр в формат маски
mask <- as(mask_1, 'SpatialGridDataFrame')

plot(mask) # проверяем, что получилось
summary(mask)


# read boundary study area 
# studarea <- readOGR("mask_aoi_shp.shp")
## загрузили новый шейп-файл с границами территории


spplot(alldate, sp.layout = list("sp.polygons", mask))
## отрисовали график с границами интересующего нас участка
## команда list создала последовательность из векторов с данными и с границами территории
## 
## поменяли настройки графика
spplot(alldate,sp.layout = list("sp.polygons", mask, col="lightgreen", lwd=2),
       main = "Свойство MG1",
       key.space = list(x = 1, y = 0.98, corner = c(0,1)),
       scales=list(draw=TRUE))

## Задача состоит в том, чтобы задать объект, с которым 
## работает пакет gstat, а затем с помощью пакета gstat, провести интерполяцию 
## (предсказать содержание свинца в точках, где не было пробоотбора) методом 
## обратных расстояний, затем построить семивариограмму, подобрать 
## параметры модели, описывающие эту семивариограмму и провести 
## интерполяцию методом ординарного кригинга.


## Интерполяция точечных данных методом обратных расстояний 
## Метод обратных расстояний или метод обратных взвешенных 
## расстояний (IDW - Inverse Distance Weighting) предполагает, что объекты, 
## которые находятся поблизости, более похожи, чем объекты, удаленные друг 
## от друга; при этом каждая точка пробоотбора оказывает «локальное влияние», 
## которое уменьшается с увеличением расстояния. При расчете значения в 
## точке, где не было пробоотбора, используются точки, значения показателя в 
## которых известны, при этом вес точек стремительно уменьшается как функция 
## от расстояния. Поэтому метод носит название обратных взвешенных 
## расстояний. Интерполяция методом обратных расстояний осуществляется с 
## помощью функции krige из библиотеки gstat. В результате интерполяции 
## создается, так называемый «грид-файл», где значения предсказываются в 
## узлах регулярной сетки. В качестве параметров функции krige указывается 
## зависимая переменная с помощью параметра formula, задаются координаты и 
## исходные данные с помощью параметра locations и подгружается маска, где 
## указаны границы участка, с помощью параметра newdata. Маска - это 
## текстовый фрейм, в котором указано, сколько нужно получить строк, сколько 
## столбцов, координаты первой точки (левого верхнего угла); число, 
## обозначающее, что нет данных (-9999) и далее приведена матрица, где 
## единицами отмечены точки, в которых должны быть предсказаны значения, а 
## числом -9999 помечены точки, где значения предсказывать не нужно, так как 
## они выходят за границы участка. 


## проводим интерполяцию методом обратных расстояний, 
## в переменную geul.idw записываем результаты интерполяции
## IDW (метод обратных расстояний), когда не указана модель вариограммы 
alldate.idw <- krige(formula = MG1~1, locations =  alldate, newdata = mask)

## смотрим сколько и каких переменных содержит и рисуем
names(alldate.idw)
summary(alldate.idw)
spplot(alldate.idw)

## воспользуемся параметром zcol для того,
## чтобы на картограмме была только одна нужная переменная
spplot(alldate.idw, zcol = "var1.pred")

## пробуем разные палитры заливки диаграммы, чтобы подобрать более наглядную
spplot(alldate.idw, zcol = "var1.pred", col.regions = terrain.colors(16))
spplot(alldate.idw, zcol = "var1.pred", col.regions = heat.colors(25))
spplot(alldate.idw, zcol = "var1.pred", col.regions = bpy.colors())

## Рисуем итоговую картограмму, интреполированную методом обратных расстояний
spplot(alldate.idw, zcol = "var1.pred", col.regions = terrain.colors(16), 
       xlim=c(0,205), ylim=c(0,205), 
       main="Распределение Mg [ммоль(+)/100 г почвы], метод IDW",
       scales=list(draw=T))


## Работа с пакетом gstat

## Определение объекта пакета gstat. Общий вид впервые создаваемого объекта пакета gstat
## для одной переменной выглядит следующим образом (большая часть параметров не указана):
## gstat(formula, data, model = NULL)
## Параметр formula определяет зависимую переменную (отклик) и независимые переменные.
## Выбор формулы зависит от выбранного метода интерполяции. В данном случае мы будем использовать 
## формулу для простого и ординарного кригинга вида z~1, где z – это экологическая или почвенная
## переменная, пространственное распределение которой нужно предсказать, а независимых переменных нет.
## Параметр data указывает на пространственный фрейм данных, где содержатся исходные данные:
## координаты точек, зависимая переменная и независимые переменные (если они есть). 

gMg = gstat(formula = MG1~1, data = alldate)

## рассчитываем и нарисуем экспериментальную семивариограмму
vgMg <- variogram(gMg)
plot(vgMg)

#Зададим длину вариограммы и длину шага 
vgMg <- variogram(gMg, cutoff=140, width=10)
plot(vgMg, pch = 19, cex=1)


## смотрим, что содержит gMg
gMg

## рассчитываем и рисуем вариограмное облако
vgMg1= variogram(gMg, cloud=TRUE)
plot (vgMg1)
vgMg1

## рисуем вариограмму с указанием количества точек, обладающих одинаковым значением gamma,
## т.е. усредненной дисперсии разности значений в точках, находящихся на данном расстоянии
plot(vgMg, plot.nu=TRUE)

## настраиваем формат прорисовки точек семивариограммы
plot(vgMg, plot.nu= TRUE, pch = 16)

## смотрим, что содержит vgMg
vgMg

## задаем начальные значения (визуальные параметры) для модели вариограммы и её тип
vgmMg <- vgm(nugget = 0.11, psill = 0.16, range = 70, model = "Sph")
vgmMg
plot(vgMg, vgmMg)

## подбираем оптимальную модель вариограммы командой fit.variogram
vgmMg <- fit.variogram(vgMg, vgmMg, fit.method=6)
plot(vgMg, vgmMg)
vgmMg

## Далее будем делать интерполяцию методом ординарного кригинга
## 
# снова проверяем маску
mask_1 = raster (nrows=101, ncols=101, xmn=0, xmx=202, ymn=1, 
                 ymx=203, vals=1)
plot(mask_1) # проверяем, что получилось

# переводим растр в формат маски
mask <- as(mask_1, 'SpatialGridDataFrame')

##проверка на дубликаты
zerodist(alldate)
# удаление дубликатов
alldate=remove.duplicates(alldate, zero = 0.0, remove.second = TRUE, 
                          memcmp = TRUE)


# интерполируем методом ординарного кригинга по оптимально подобранной семивариограмме
alldate.krig <- krige(formula = MG1~1, locations = alldate, newdata = mask,
                   model = vgmMg)

names(alldate.krig)
summary(alldate.krig) 
alldate.krig
plot(alldate.krig)

## рисуем две переменные из файла geul.krige
spplot(alldate.krig, zcol=c("var1.pred","var1.var"))

spplot(alldate.krig, zcol = "var1.pred", col.regions = terrain.colors(16),
       xlim=c(0,205), ylim=c(0,205),
       main="Распределение Mg [ммоль(+)/100 г почвы], кригинг")

## добавляем в файл кригинга переменную idw c предсказаниями методом обратных расстояний
alldate.krig$idw=alldate.idw$var1.pred
names(alldate.krig)
spplot(alldate.krig, zcol=c("var1.pred","idw"))
summary(alldate.krig)

## считаем ошибку предсказания с помощью функции sqrt() [квадратный корень] от значений дисперсии предсказания.
alldate.krig$var1.sd <- sqrt(alldate.krig$var1.var)

spplot(alldate.krig, zcol = "var1.sd", col.regions = bpy.colors(),
       main="Ошибка предсказания [ммоль(+)/100 г почвы]",
       xlim=c(0,205), ylim=c(0,205), 
       sp.layout=list("sp.points",alldate, pch=3, col = "black", cex=1))

summary(alldate.krig$var1.sd)

## рисуем картограммы по двум методам сдобавлением наименования, осей, палитры (вариант 6) 
spplot(alldate.krig, zcol=c("var1.pred","idw"),
       col.regions = terrain.colors(16),
       xlim=c(0,205), ylim=c(0,205),
       main="Интерполяция Mg [ммоль(+)/100 г почвы]",
       scales=list(draw=T))

